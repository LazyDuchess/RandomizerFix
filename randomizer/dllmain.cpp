// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"
using namespace std;
#include <iostream>

//thanks stackoverflow
void WriteToMemory(DWORD addressToWrite, char* valueToWrite, int byteNum)
{
    //used to change our file access type, stores the old
    //access type and restores it after memory is written
    unsigned long OldProtection;
    //give that address read and write permissions and store the old permissions at oldProtection
    VirtualProtect((LPVOID)(addressToWrite), byteNum, PAGE_EXECUTE_READWRITE, &OldProtection);

    //write the memory into the program and overwrite previous value
    memcpy((LPVOID)addressToWrite, valueToWrite, byteNum);

    //reset the permissions of the address back to oldProtection after writting memory
    VirtualProtect((LPVOID)(addressToWrite), byteNum, OldProtection, NULL);
}

//Hook into the game's loading procedures to initialize some random seeds (Sims2EP9RPC.exe+399A82).
char jumpHookInitializer[] = { 0xE9, 0x88, 0xB6, 0x3A, 0x01 };

//Hook into the random seed sequencer (Sims2EP9RPC.GZDllGetGZCOMDirector+8C8D).
char jumpHook[] = { 0xE9, 0x84, 0xD0, 0x72, 0x01, 0x90 };

//New randomization code (Sims2EP9RPC.exe+174503A).
char newBytes[] = { 0x83, 0x3D, 0xF0, 0x50, 0xB4, 0x01, 0x00, 0x74, 0x2E, 0x0F, 0x1F, 0x40, 0x00, 0xEB, 0x03, 0x0F, 0x1F, 0x00, 0x50, 0x51, 0xFF, 0x15, 0xFC, 0x50, 0xB4, 0x01, 0x59, 0x2D, 0x00, 0x40, 0x00, 0x00, 0x51, 0x8B, 0xC8, 0xB8, 0x00, 0x00, 0x02, 0x00, 0xF7, 0xE1, 0x59, 0x8B, 0xC6, 0x58, 0x01, 0xF0, 0x89, 0x01, 0xE9, 0x46, 0x2F, 0x8D, 0xFE, 0x56, 0x50, 0x51, 0x68, 0x04, 0x51, 0xB4, 0x01, 0xFF, 0x15, 0x58, 0x31, 0x1D, 0x01, 0x8B, 0xF0, 0x05, 0x50, 0xC6, 0x05, 0x00, 0xA3, 0xFC, 0x50, 0xB4, 0x01, 0x8B, 0xC6, 0x05, 0x80, 0xC6, 0x05, 0x00, 0xA3, 0x00, 0x51, 0xB4, 0x01, 0xC7, 0x05, 0xF0, 0x50, 0xB4, 0x01, 0x01, 0x00, 0x00, 0x00, 0x68, 0xF4, 0x50, 0xB4, 0x01, 0xFF, 0x15, 0x34, 0x33, 0x1D, 0x01, 0xFF, 0x15, 0xAC, 0x33, 0x1D, 0x01, 0x8B, 0xC8, 0xA1, 0xF4, 0x50, 0xB4, 0x01, 0x31, 0xC8, 0x8B, 0xC8, 0xFF, 0x15, 0x08, 0x32, 0x1D, 0x01, 0x01, 0xC1, 0x89, 0x0D, 0xF4, 0x50, 0xB4, 0x01, 0x8B, 0xC1, 0xA3, 0xF8, 0xBF, 0x49, 0x01, 0xFF, 0x35, 0xF4, 0x50, 0xB4, 0x01, 0xFF, 0x15, 0x00, 0x51, 0xB4, 0x01, 0x58, 0x59, 0x58, 0x5E, 0xE9, 0x65, 0xFF, 0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x73, 0x76, 0x63, 0x72, 0x74, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0xE8, 0xC4, 0x48, 0xC5, 0xFE, 0xA1, 0xA0, 0x90, 0x48, 0x01, 0x83, 0xC0, 0x7C, 0x8B, 0x08, 0x83, 0xC1, 0x08, 0xA1, 0xF4, 0x50, 0xB4, 0x01, 0x89, 0x01, 0xA1, 0xA8, 0x90, 0x48, 0x01, 0x05, 0xDC, 0x00, 0x00, 0x00, 0x8B, 0x0D, 0xF4, 0x50, 0xB4, 0x01, 0x89, 0x08, 0xA1, 0xF4, 0x50, 0xB4, 0x01, 0xA3, 0xF8, 0xBF, 0x89, 0x01, 0xE9, 0x3E, 0x49, 0xC5, 0xFE, 0x89, 0x01, 0x0F, 0xAC, 0xD0, 0x10, 0xE9, 0x63, 0x2E, 0x8D, 0xFE };

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        //this is done in asm now
        //modHandle = GetModuleHandleA("msvcrt.dll");
        WriteToMemory(0x00799A82, jumpHookInitializer, sizeof(jumpHookInitializer) / sizeof(*jumpHookInitializer));
        WriteToMemory(0x00417FB1, jumpHook, sizeof(jumpHook) / sizeof(*jumpHook));
        WriteToMemory(0x01B4503A, newBytes, sizeof(newBytes) / sizeof(*newBytes));
        break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

